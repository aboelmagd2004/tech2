@using TechXpress.Data.Models
@model Order
@{
    ViewData["Title"] = "Checkout";
    var orderId = (int)ViewData["OrderId"];
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />

<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow-lg border-0 rounded-4">
                <div class="card-header bg-primary text-white text-center rounded-top-4">
                    <h3 class="mb-0">Secure Checkout</h3>
                </div>
                <div class="card-body">
                    <p class="text-muted text-center">Total: <strong>@Model.TotalAmount EGP</strong></p>
                    <div id="payment-element" class="mb-3"></div>
                    <button id="submit" class="btn btn-success w-100">Pay Securely</button>
                    <div id="error-message" class="mt-3 text-danger text-center"></div>
                </div>
                <div class="card-footer text-center">
                    <small class="text-muted">Your payment is encrypted and secure.</small>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://js.stripe.com/v3"></script>
    <script>
        const stripe = Stripe('@ViewData["PublishableKey"]');
        let elements;
        const orderId = @orderId;

        async function initialize() {
            const res = await fetch('/Payment/CreatePaymentIntent', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    amount: parseInt('@Model.TotalAmount' * 100),
                    currency: 'egp',
                    orderId: orderId
                })
            });

            const { clientSecret } = await res.json();
            elements = stripe.elements({ clientSecret });

            const paymentElement = elements.create('payment', {
                layout: 'tabs'
            });
            paymentElement.mount('#payment-element');
        }

        document.getElementById('submit').addEventListener('click', async (e) => {
            e.preventDefault();
            const { error } = await stripe.confirmPayment({
                elements,
                confirmParams: {
                    return_url: `${window.location.origin}/Payment/Confirm?orderId=${orderId}`
                }
            });

            const errorMessageDiv = document.getElementById('error-message');
            if (error) {
                errorMessageDiv.textContent = error.message;
                errorMessageDiv.classList.add("alert", "alert-danger");
            } else {
                errorMessageDiv.textContent = '';
                errorMessageDiv.classList.remove("alert", "alert-danger");
            }
        });

        initialize();
    </script>
}
